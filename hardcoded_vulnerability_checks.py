from vulnerability_types import VulnerabilityCheck
from typing import List

vulnerability_checks: List[VulnerabilityCheck] = [

    VulnerabilityCheck(
        id="RUST001",

        title="[Rust-General] Undefined Behavior",
        severity="Critical",
        pattern=r"unsafe\s+\{.*?\}",
        safe_pattern=None,
        description="Operations that could lead to undefined behavior, such as dereferencing a raw pointer or accessing arrays out-of-bounds without proper checks.",
        suggested_fix="Ensure all accesses within unsafe blocks are checked and validated to prevent undefined behavior. Use safe abstractions where possible.",),
    VulnerabilityCheck(
        id="RUST002",

        title="[Rust-General] Data Races",
        severity="High",
        pattern=r"std==thread==spawn\(|unsafe\s+\{.*?\}",
        safe_pattern=r"std==sync==Mutex|std==sync==RwLock",
        description= "Concurrent data access without proper synchronization can lead to data races.",
        suggested_fix = "Use synchronization primitives like Mutex or RwLock to safeguard against data races in concurrent operations.",),
    VulnerabilityCheck(
        id="RUST003",

        title="[Rust-General] Dangling Pointers",
        severity="Critical",
        pattern=r"\*\w+\s*=\s*\w+;",
        safe_pattern=None,
        description="Use of pointers that may no longer be valid, leading to dangling pointers.",
        suggested_fix="Ensure that any pointer or reference is valid for the duration of its use. Consider using smart pointers for safer memory management.",),
    VulnerabilityCheck(
        id="RUST004",

        title="[Rust-General] Buffer Overflows",
        severity="High",
        pattern=r"\w+\[.*?\]",
        safe_pattern=r".get\(|.get_mut\(",
        description = "Accessing arrays or vectors with unchecked indices, potentially leading to buffer overflows.",
        suggested_fix = "Use the `.get()` or `.get_mut()` methods for accessing elements by index safely.",),
    VulnerabilityCheck(
        id = "RUST005",

        title = "[Rust-General] Aliasing Rules Violation",
        severity = "Medium",
        pattern = r"&mut\s+\w+",
        safe_pattern = None,
        description = "Mutable aliasing that could lead to data races or undefined behavior.",
        suggested_fix = "Ensure that mutable references do not alias by using exclusive access patterns.",),
    VulnerabilityCheck(
        id = "RUST006",

        title = "[Rust-General] Memory Leaks",
        severity = "Medium",
        pattern = r"Box==new\(|Rc==new\(|Arc==new\(",
        safe_pattern = None,
        description = "Improper use of memory allocation that could result in memory leaks.",
        suggested_fix = "Ensure proper deallocation of resources and consider using smart pointers correctly to prevent leaks.",),
    VulnerabilityCheck(
        id = "RUST007",

        title = "[Rust-General] Uninitialized Memory",
        severity = "High",
        pattern = r"std==mem==uninitialized\(|std==mem==MaybeUninit==uninit\(\).assume_init\(",
        safe_pattern =r"std==mem==MaybeUninit==new\(",
        description= "Use of uninitialized memory, which can lead to undefined behavior.",
        suggested_fix = "Use `MaybeUninit<T>` for safer initialization of memory.",),
    VulnerabilityCheck(
        id="RUST009",

        title="[Rust-General] Type Punning and Transmutation",
        severity="High",
        pattern=r"std==mem==transmute\(",
        safe_pattern=None,
        description="Unsafe type conversions that can break type safety.",
        suggested_fix="Avoid using `transmute` where possible. Prefer safe conversion methods or carefully validate transmutations.",),
    VulnerabilityCheck(
        id="RUST010",

        title="[Rust-General] Manual Memory Management Errors",
        severity="High",
        pattern=r"unsafe\s+\{.*?\}",
        safe_pattern=None,
        description="Manual allocation, deallocation, or manipulation of memory, risking errors like double frees or use-after-free.",
        suggested_fix="Use Rust's ownership and borrowing system as much as possible, and ensure manual memory management is error-free when necessary.",),
    VulnerabilityCheck(
        id="RUST011",

        title="[Rust-General] Use After Free",
        severity="Critical",
        pattern=r"unsafe\s+\{.*?\}",
        safe_pattern=None,
        description="Accessing memory after it has been freed, leading to potentially exploitable vulnerabilities.",
        suggested_fix="Ensure that pointers or references to memory are not used after the memory has been deallocated. Use lifetime tracking features in Rust to manage memory safely.",),
    VulnerabilityCheck(
        id="RUST012",

        title="[Rust-General] Integer Overflow",
        severity="High",
        pattern=r"\w+\s*=\s*\w+\s*[+\-*\/]\s*\w+;",
        safe_pattern=
            r"\.checked_add\(|\.checked_sub\(|\.checked_mul\(|\.checked_div\(",
        description= "Arithmetic operations that may overflow, leading to incorrect calculations or vulnerabilities.",
        suggested_fix = "Use checked arithmetic functions like `checked_add` to prevent overflows.",),
    VulnerabilityCheck(
        id="RUST013",

        title="[Rust-General] Improper Access Control",
        severity="Medium",
        pattern=r"pub\s+unsafe\s+\{.*?\}",
        safe_pattern=None,
        description="Exposing unsafe blocks or functions publicly without proper encapsulation or safety checks.",
        suggested_fix="Minimize the visibility of unsafe code. Encapsulate unsafe operations within safe abstractions whenever possible.",),
    VulnerabilityCheck(
        id="RUST014",

        title="[Rust-General] Race Condition in Unsafe Code",
        severity="High",
        pattern=r"unsafe\s+\{.*?\}",
        safe_pattern=None,
        description="Concurrency issues within unsafe blocks that could lead to race conditions.",
        suggested_fix="Employ proper synchronization mechanisms even within unsafe blocks to prevent race conditions.",),
    VulnerabilityCheck(
        id="RUST015",

        title="[Rust-General] Unsafe Trait Implementation",
        severity="Medium",
        pattern=r"unsafe\s+impl",
        safe_pattern=None,
        description="Implementing traits unsafely, which might lead to undefined behavior if the trait's contract is not properly upheld.",
        suggested_fix="Ensure that unsafe trait implementations strictly adhere to their expected contracts and behaviors.",),
    VulnerabilityCheck(
        id="RUST016",

        title="[Rust-General] Insecure Randomness",
        severity="Medium",
        pattern=r"rand==",
        safe_pattern=r"rand==thread_rng\(\)",
        description= "Use of insecure or non-cryptographically secure random number generators.",
        suggested_fix = "Use a cryptographically secure random number generator like `rand==thread_rng()` for security-critical applications.",),
    VulnerabilityCheck(
        id="RUST017",

        title="[Rust-General] Panics in Unsafe Code",
        severity="Medium",
        pattern=r"unsafe\s+\{.*?\}\s*.unwrap\(\)|.expect\(",
        safe_pattern=None,
        description="Using `.unwrap()` or `.expect()` within unsafe blocks, which may lead to panics in scenarios where error handling is critical.",
        suggested_fix="Handle errors gracefully in unsafe code to avoid panicking, using `Result` and error handling patterns instead of `.unwrap()` or `.expect()`.",),
    VulnerabilityCheck(
        id="RUST018",

        title="[Rust-General] Misuse of Sync and Send Traits",
        severity="High",
        pattern=r"unsafe\s+impl\s+(Sync|Send)",
        safe_pattern=None,
        description="Incorrectly implementing `Sync` or `Send` traits, potentially leading to data races in concurrent contexts.",
        suggested_fix="Carefully audit and ensure correctness when manually implementing `Sync` or `Send` to uphold Rust's safety guarantees.",),
    VulnerabilityCheck(
        id="RUST019",

        title="[Rust-General] Unsafe Block in Public Interface",
        severity="Medium",
        pattern=r"pub\s+unsafe\s+\{.*?\}",
        safe_pattern=None,
        description="Exposing unsafe blocks through a public interface, increasing the risk of misuse by external callers.",
        suggested_fix="Avoid exposing unsafe operations in public APIs. Provide safe wrappers to encapsulate unsafe operations internally.",),
    VulnerabilityCheck(
        id="RUST020",

        title="[Rust-General] Unsafe Dereferencing",
        severity="High",
        pattern=r"\*\w+",
        safe_pattern=None,
        description="Dereferencing pointers without ensuring they point to valid memory, leading to potential segmentation faults or undefined behavior.",
        suggested_fix="Verify the validity of pointers before dereferencing, especially in unsafe contexts. Consider using references or smart pointers when possible.",),
    VulnerabilityCheck(
        id="VULN001",

        title="[Rust-Solana] Integer Overflow or Underflow",
        severity="High",
        pattern=r"let\s+\w+\s*=\s*\w+\.\w+\s*[+\-*\/]\s*\w+;",
        safe_pattern=
            r"\.checked_add\(|\.checked_sub\(|\.checked_mul\(|\.checked_div\(",
        description= "Performing arithmetic operation without checking for overflow or underflow.",
        suggested_fix = "Use `checked_add`, `checked_sub`, `checked_mul`, or `checked_div` to safely perform arithmetic operations.",),
    VulnerabilityCheck(
        id="VULN002",

        title="[Rust-Solana] Loss of Precision",
        severity="High",
        pattern=r"\.try_round_u64\(\s*\)",
        safe_pattern=r"\.try_floor_u64\(\s*\)",
        description= "The use of try_round_u64() for rounding up may lead to loss of precision.",
        suggested_fix = "Use try_floor_u64() to prevent potential loss of precision.",),
    VulnerabilityCheck(
        id="VULN003",

        title="[Rust-Solana] Inaccurate Calculation Results",
        severity="High",
        pattern=r"\.saturating_(add|sub|mul)\(",
        safe_pattern=r"\.checked_(add|sub|mul|div)\(",
        description= "Reliance on saturating arithmetic operations without considering precision loss.",
        suggested_fix = "Consider using `checked_add`, `checked_sub`, `checked_mul`, or `checked_div` to handle arithmetic operations explicitly and avoid precision loss.",),
    VulnerabilityCheck(
        id="VULN004",

        title="[Rust-Solana] Panic due to Division by Zero",
        severity="High",
        pattern=r"\b\d+\s*/\s*0\b",
        safe_pattern=None,
        description="Division by zero causing the program to panic and terminate unexpectedly.",
        suggested_fix="Ensure divisor is not zero before performing division, or use checked division methods.",),
    VulnerabilityCheck(
        id="VULN006",

        title="[Rust-Solana] Error Not Handled",
        severity="High",
        pattern=r"&spl_token==instruction==transfer\s*\(",
        safe_pattern=r"&spl_token==instruction==transfer\s*\(.*\)?;",
        description= "Function calls that might return `Err` are not checked for errors.",
        suggested_fix = "Ensure that results are checked for errors. Use `?` at the end of the line to propagate errors.",),
    VulnerabilityCheck(
        id="VULN007",

        title="[Rust-Solana] Missing Check for the Permission of Caller",
        severity="Low",
        pattern=r"fn\s+init_market\s*\(\s*accounts\s*=\s*&\[AccountInfo\]\s*\)\s*->\s*ProgramResult\s*\{",
        safe_pattern=r"require_is_authorized_signer\(",
        description= "Missing verification of caller permissions before sensitive operations.",
        suggested_fix = "Implement and invoke a permission check function to verify the caller's authority.",),
    VulnerabilityCheck(
        id="VULN008",

        title="[Rust-Solana] Account Signer Check",
        severity="High",
        pattern=r"next_account_info\s*\(",
        safe_pattern=r"if\s+!\w+\.is_signer",
        description= "Ensure the expected signer account has actually signed to prevent unauthorized account modifications.",
        suggested_fix = "Verify `is_signer` is true for transactions requiring signatures.",),

    VulnerabilityCheck(
        id="VULN009",

        title="[Rust-Solana] Account Writable Check",
        severity="High",
        pattern=r"next_account_info\s*\(",
        safe_pattern=r"if\s+!\w+\.is_writable",
        description= "Ensure state accounts are checked as writable to prevent unauthorized modifications.",
        suggested_fix = "Verify `is_writable` is true for accounts that should be modified.",),

    VulnerabilityCheck(
        id="VULN010",

        title="[Rust-Solana] Account Owner or Program ID Check",
        severity="High",
        pattern=r"next_account_info\s*\(",
        safe_pattern=r"if\s+\w+\.owner\s*!=",
        description= "Verify the owner of state accounts to prevent fake data injection by malicious programs.",
        suggested_fix = "Check the account's owner matches the expected program ID.",),

    VulnerabilityCheck(
        id="VULN011",

        title="[Rust-Solana] Account Initialized Check",
        severity="High",
        pattern=r"try_from_slice\s*\(",
        safe_pattern=r"if\s+\w+\.is_initialized",
        description= "Prevent re-initialization of already initialized accounts.",
        suggested_fix = "Ensure account's `is_initialized` flag is checked before initializing.",),
    VulnerabilityCheck(
        id="VULN017",

        title="[Rust-Solana] Signer Authorization - Anchor",
        severity="High",
        pattern=r"pub\s+fn\s+\w+\s*\(ctx=\s*Context<\w+>\)\s*->\s*ProgramResult\s*\{",
        safe_pattern=r"if\s+!\w+\.is_signer\s*\{",
        description= "Signer check is missing, which could lead to unauthorized execution.",
        suggested_fix = "Add a check to verify if the caller is a signer.",),
    VulnerabilityCheck(
        id="VULN018",

        title="[Rust-Solana] Account Data Matching - Anchor",
        severity="High",
        pattern=r"SplTokenAccount==unpack\(&ctx.accounts.\w+.data.borrow\(\)\)",
        safe_pattern=
            r"if\s+ctx\.accounts\.\w+\.key\s*!=\s*&\w+\.owner\s*\{",
        description= "Missing verification of token ownership or mint authority in SPL Token accounts.",
        suggested_fix = "Verify token ownership matches the expected authority before proceeding.",),
    VulnerabilityCheck(
        id="VULN019",

        title="[Rust-Solana] Owner Checks - Anchor",
        severity="High",
        pattern=r"SplTokenAccount==unpack\(&ctx.accounts.\w+.data.borrow\(\)\)",
        safe_pattern=
            r"if\s+ctx.accounts.\w+.owner\s*!=\s*&spl_token==ID\s*\{",
        description= "Missing checks on the owner field in the metadata of an Account or on the Account itself.",
        suggested_fix = "Ensure the owner of the account is verified against the expected program ID.",),
    VulnerabilityCheck(
        id="VULN020",

        title="[Rust-Solana] Type Cosplay - Anchor",
        severity="High",
        pattern=r"User==try_from_slice\(&ctx.accounts.\w+.data.borrow\(\)\)",
        safe_pattern=
            r"if\s+\w+.discriminant\s*!=\s*AccountDiscriminant==\w+\s*\{",
        description= "Risks of different accounts impersonating each other by sharing identical data structures.",
        suggested_fix = "Add discriminant checks to differentiate account types securely.",),
    VulnerabilityCheck(
        id="VULN021",

        title="[Rust-Solana] Check Initialize - Anchor",
        severity="High",
        pattern=r"User==try_from_slice\(&ctx.accounts.\w+.data.borrow\(\)\)",
        safe_pattern=r"if\s+\w+.discriminator\s*==\s*true\s*\{",
        description= "Data should only be initialized once; missing checks can lead to reinitialization.",
        suggested_fix = "Use a flag to ensure data is initialized only once.",),
    VulnerabilityCheck(
        id="VULN022",

        title="[Rust-Solana] Arbitrary CPI - Anchor",
        severity="High",
        pattern=r"solana_program==program==invoke\(",
        safe_pattern=
            r"if &spl_token==ID != ctx.accounts.token_program.key \{",
        description= "Unverified target program id in CPI can lead to arbitrary code execution.",
        suggested_fix = "Ensure the target program id is verified against expected program id.",),
    VulnerabilityCheck(
        id="VULN023",

        title="[Rust-Solana] Duplicate Mutable Accounts - Anchor",
        severity="High",
        pattern=r"let\s+user_a\s+=\s+&mut\s+ctx.accounts.user_a;.*let\s+user_b\s+=\s+&mut\s+ctx.accounts.user_b;",
        safe_pattern=
            r"if ctx.accounts.user_a.key\(\) == ctx.accounts.user_b.key\(\) \{",
        description= "Passing the same mutable account multiple times may result in unintended data overwriting.",
        suggested_fix = "Add checks to ensure that mutable accounts passed are distinct.",),
    VulnerabilityCheck(
        id="VULN024",

        title="[Rust-Solana] Bump Seed Canonicalization  - Anchor",
        severity="High",
        pattern=r"Pubkey==create_program_address\(&\[",
        safe_pattern=
            r"let \(address, expected_bump\) = Pubkey==find_program_address\(&\[",
        description= "Improper validation of bump seeds can lead to security vulnerabilities.",
        suggested_fix = "Use `find_program_address` for bump seed canonicalization and validate against expected seeds.",),
    VulnerabilityCheck(
        id="VULN025",

        title="[Rust-Solana] PDA Sharing  - Anchor",
        severity="High",
        pattern=r"token==transfer\(ctx.accounts.transfer_ctx\(\).with_signer\(&\[\w+\]\),",
        safe_pattern=
            r"let seeds = &\[\w+.withdraw_destination.as_ref\(\), &\[\w+.bump\]\];",
        description= "Sharing PDA across multiple roles without proper permission separation may lead to unauthorized access.",
        suggested_fix = "Ensure PDAs used across roles have distinct seeds and permissions.",),
    VulnerabilityCheck(
        id="VULN026",

        title="[Rust-Solana] Closing Accounts  - Anchor",
        severity="High",
        pattern=r"\*\*ctx.accounts.account.to_account_info\(\).lamports.borrow_mut\(\) = 0;",
        safe_pattern=
            r"let mut data = account.try_borrow_mut_data\(\)?;.*CLOSED_ACCOUNT_DISCRIMINATOR",
        description= "Improper closing of accounts may leave them vulnerable to misuse.",
        suggested_fix = "Ensure accounts are properly closed by transferring lamports and marking with a discriminator.",),
    VulnerabilityCheck(
        id="VULN027",

        title="[Rust-Solana] Sysvar System Account Not Checked",
        severity="High",
        pattern=r"solana_program==sysvar==instructions==load_current_index\(\s*&accs\.\w+\.try_borrow_mut_data\(\)\?\s*\)",
        safe_pattern=
            r"if \*accs\.\w+\.key != solana_program==sysvar==instructions==id\(\) \{",
        description= "Sysvar system account is accessed without verifying its legitimacy, exposing the contract to potential manipulation or attacks.",
        suggested_fix = "Before deserializing information from a sysvar account, verify that the incoming address matches the expected sysvar ID.",),
    VulnerabilityCheck(
        id="VULN028",

        title="[Rust-Solana] PDA Account Misuse Without Proper Verification",
        severity="High",
        pattern=r"CpiContext==new\(\s*self.token_program.clone\(\),\s*Transfer\s*\{.*?authority= self.market_authority.clone\(\),.*?\}\s*\)",
        safe_pattern=
            r"CpiContext==new\(.*Burn\s*\{.*?authority= self.depositor.clone\(\),.*?\}\s*\)",
        description= "The PDA account is utilized without validating the caller's and beneficiary's accounts, allowing unauthorized actions such as burning other users' Tokens and transferring proceeds to an attacker's account.",
        suggested_fix = "Implement checks to verify the depositor's signature and ensure the deposit_account cannot be forged by validating the derived address generated by seeds from reserve.key and depositor.key.",),
    VulnerabilityCheck(
        id="VULN029",

        title="[Rust-Solana] Unchecked Account Deserialization",
        severity="High",
        pattern=r"try_from_slice\(&ctx.accounts.\w+.data.borrow\(\)\?\)",
        safe_pattern=
            r"if ctx.accounts.\w+.owner == &expected_program_id { ... }",
        description= "Failing to check if an account is of the expected type before deserializing can lead to incorrect assumptions about state.",
        suggested_fix = "Ensure accounts are of the expected type before deserialization.",),
    VulnerabilityCheck(
        id="VULN030",

        title="[Rust-Solana] Log Injection",
        severity="Medium",
        pattern=r"msg!\(.*?\)",
        safe_pattern=None,
        description="Injection vulnerabilities in program logs can lead to misleading or harmful information being logged.",
        suggested_fix="Sanitize all inputs that are logged to prevent log injection attacks.",),
    VulnerabilityCheck(
        id="VULN031",

        title="[Rust-Solana] CPI to Unauthorized Programs",
        severity="High",
        pattern=r"invoke\(\[.*?\], &[.*?]\)",
        safe_pattern=
            r"if &authorized_programs.contains(&program_id) { ... }",
        description= "Invoking unauthorized or risky external programs can expose the contract to vulnerabilities present in those programs.",
        suggested_fix = "Whitelist external programs that can be invoked, and perform thorough security reviews on them.",),
    VulnerabilityCheck(
        id="Rust-Solana001",

        title="[Rust-Solana] Misuse of Unsafe Code",
        severity="High",
        pattern=r"unsafe\s*\{",
        safe_pattern=None,
        description="Unsafe blocks may lead to undefined behavior and memory safety violations if not used carefully. Ensure justification and proper auditing.",
        suggested_fix="Minimize the use of `unsafe` by leveraging safe Rust-Solana abstractions and validate all `unsafe` blocks for safety guarantees.",),
    VulnerabilityCheck(
        id="Rust-Solana002",

        title="[Rust-Solana] Improper Error Handling",
        severity="Medium",
        pattern=r"\.unwrap\(\)|\.expect\(",
        safe_pattern=None,
        description="Overuse of `unwrap()` or `expect()` can lead to panics. Prefer using error handling mechanisms like `match` or `if let`.",
        suggested_fix="Replace `unwrap()` and `expect()` with proper error handling to prevent unexpected panics in production code.",),
    VulnerabilityCheck(
        id="Rust-Solana003",

        title="[Rust-Solana] Overuse of Panics for Control Flow",
        severity="Medium",
        pattern=r"panic!\(",
        safe_pattern=None,
        description="Using panics for control flow makes code hard to follow and can lead to unexpected termination.",
        suggested_fix="Use Result types for error handling and reserve panics for unrecoverable errors only.",),
    VulnerabilityCheck(
        id="Rust-Solana004",

        title="[Rust-Solana] Concurrency Issues and Data Races",
        severity="High",
        pattern=r"std==thread|std==sync",
        safe_pattern=None,
        description="Improper handling of threads and synchronization can lead to data races, deadlocks, and other concurrency issues.",
        suggested_fix="Use Rust-Solana's concurrency primitives correctly, prefer `std==sync` module's types like Mutex, RwLock, and leverage the `rayon` crate for data parallelism.",),
    VulnerabilityCheck(
        id="Rust-Solana005",

        title="[Rust-Solana] Potential Memory Leaks",
        severity="Low",
        pattern=r"Rc<|Arc<|Box<",
        safe_pattern=None,
        description="Cyclic references or improper use of smart pointers can lead to memory leaks.",
        suggested_fix="Use `Weak` pointers to break cycles and audit memory usage regularly.",),
    VulnerabilityCheck(
        id="Rust-Solana006",

        title="[Rust-Solana] Potential DoS Vulnerabilities",
        severity="High",
        pattern=r"\.clone\(|Vec==with_capacity\(|String==with_capacity\(",
        safe_pattern=None,
        description="Allocations based on untRust-Solanaed input sizes can lead to DoS via memory exhaustion.",
        suggested_fix="Validate input sizes before allocations and use bounded collections. Consider rate-limiting or other mitigation strategies.",),
    VulnerabilityCheck(
        id="Rust-Solana007",

        title="[Rust-Solana] Missing Boundary Checks",
        severity="Medium",
        pattern=r"\[\w+\]",
        safe_pattern=r"\.get\(\w+\)",
        description= "Accessing arrays or vectors without boundary checks can lead to panics or buffer overflows.",
        suggested_fix = "Use `.get()` or `.get_mut()` for safe access with bounds checking, and handle the Option result appropriately.",),
    VulnerabilityCheck(
        id="Rust-Solana008",

        title="[Rust-Solana] Unnecessary Cloning of Large Data Structures",
        severity="Low",
        pattern=r"\.clone\(",
        safe_pattern=None,
        description="Cloning large data structures can lead to performance issues due to excessive memory use.",
        suggested_fix="Prefer borrowing or using reference-counted types like `Rc` or `Arc` to share data without deep copying.",),
    VulnerabilityCheck(
        id="Rust-Solana009",

        title="[Rust-Solana] Blocking I/O in Asynchronous Code",
        severity="Medium",
        pattern=r"std==fs|std==net",
        safe_pattern=r"tokio==fs|tokio==net",
        description= "Performing blocking I/O operations in async contexts can lead to thread starvation and reduced scalability.",
        suggested_fix = "Use asynchronous equivalents for file and network operations within async functions.",),
    VulnerabilityCheck(
        id="Rust-Solana010",

        title="[Rust-Solana] Misuse of Arc<Mutex<T>>",
        severity="Medium",
        pattern=r"Arc<Mutex<.*?>>",
        safe_pattern=None,
        description="Incorrect use of Arc<Mutex<T>> can lead to deadlocks or inefficient locking mechanisms.",
        suggested_fix="Ensure that locks are held for the minimum duration necessary, and consider other synchronization primitives like RwLock if applicable.",),
    VulnerabilityCheck(
        id="Rust-Solana011",

        title="[Rust-Solana] Improper Implementation of Drop Trait",
        severity="Medium",
        pattern=r"impl\s+Drop\s+for\s+.*?\s*\{",
        safe_pattern=None,
        description="Incorrect custom implementations of the Drop trait can lead to resource leaks or panic safety issues.",
        suggested_fix="Implement the Drop trait carefully, ensuring that errors are handled gracefully and resources are properly released.",),
    VulnerabilityCheck(
        id="Rust-Solana012",

        title="[Rust-Solana] Usage of mem==uninitialized and mem==zeroed",
        severity="High",
        pattern=r"mem==uninitialized\(\)|mem==zeroed\(\)",
        safe_pattern=None,
        description="Using mem==uninitialized or mem==zeroed can lead to undefined behavior if the type has any non-zero or complex initialization requirements.",
        suggested_fix="Prefer using safe initialization patterns and avoid these functions for types with non-trivial initialization requirements.",),
    VulnerabilityCheck(
        id="SOLIDITY001",

        title="Storage ABIEncoderV2 Array",
        severity="High",
        pattern=r"abi\.encode\(\w+\)",
        safe_pattern=None,
        description="solc versions 0.4.7-0.5.9 contain a compiler bug leading to incorrect ABI encoder usage.",
        suggested_fix="Use a compiler >= 0.5.10.",),
    VulnerabilityCheck(
        id="SOLIDITY002",

        title="Arbitrary from in transferFrom",
        severity="High",
        pattern=r"transferFrom\(\s*[^,]+,\s*msg.sender",
        safe_pattern=r"transferFrom\(\s*msg.sender",
        description= "Detect when msg.sender is not used as from in transferFrom.",
        suggested_fix = "Use msg.sender as from in transferFrom.",),
    VulnerabilityCheck(
        id="SOLIDITY003",

        title="Modifying storage array by value",
        severity="High",
        pattern=r"function\s+\w+\s*\(\s*uint\[\d+\]\s+\w+\s*\)\s*internal",
        safe_pattern=
            r"function\s+\w+\s*\(\s*uint\[\d+\]\s+storage\s+\w+\s*\)\s*internal",
        description= "Detect arrays passed to a function that expects reference to a storage array.",
        suggested_fix = "Ensure the correct usage of memory and storage in the function parameters. Make all the locations explicit.",),
    VulnerabilityCheck(
        id="SOLIDITY004",

        title="ABI encodePacked Collision",
        severity="High",
        pattern=r"abi\.encodePacked\(\s*[^,]+\s*,\s*[^,]+",
        safe_pattern=None,
        description="Detect collision due to dynamic type usages in abi.encodePacked.",
        suggested_fix="Do not use more than one dynamic type in abi.encodePacked(). Use abi.encode(), preferably.",),
    VulnerabilityCheck(
        id="SOLIDITY005",

        title="Incorrect shift in assembly",
        severity="High",
        pattern=r"assembly\s*\{\s*shr\(\w+,\s*\d+\)\s*\}",
        safe_pattern=r"assembly\s*\{\s*shr\(\d+,\s*\w+\)\s*\}",
        description= "Detect if the values in a shift operation are reversed.",
        suggested_fix = "Swap the order of parameters.",),
    VulnerabilityCheck(
        id="SOLIDITY006",

        title="Multiple constructor schemes",
        severity="High",
        pattern=r"constructor\(\)\s*public\s*\{.*\}\s*function\s+\w+\(\)\s*public",
        safe_pattern=None,
        description="Detect multiple constructor definitions in the same contract (using new and old schemes).",
        suggested_fix="Only declare one constructor, preferably using the new scheme constructor(...) instead of function <contractName>(...).",),
    VulnerabilityCheck(
        id="SOLIDITY008",

        title="Public Mappings with Nested Variables",
        severity="High",
        pattern=r"mapping\s*\(\w+\s*=>\s*\w+\[\]\)\s*public",
        safe_pattern=None,
        description="Prior to Solidity 0.5, a public mapping with nested structures returned incorrect values.",
        suggested_fix="Do not use public mapping with nested structures.",),
    VulnerabilityCheck(
        id="SOLIDITY009",

        title="Right-to-Left-Override Character",
        severity="High",
        pattern=r"U\+202E",
        safe_pattern=None,
        description="An attacker can manipulate the logic of the contract by using a right-to-left-override character.",
        suggested_fix="Special control characters must not be allowed.",),
    VulnerabilityCheck(
        id="SOLIDITY010",

        title="State Variable Shadowing",
        severity="High",
        pattern=r"contract\s+\w+\s*is\s+\w+\s*\{.*address\s+owner;",
        safe_pattern=None,
        description="Detection of state variables shadowed.",
        suggested_fix="Remove the state variable shadowing.",),
    VulnerabilityCheck(
        id="SOLIDITY011",

        title="Suicidal",
        severity="High",
        pattern=r"function\s+kill\(\)\s*public\s*\{\s*selfdestruct\(",
        safe_pattern=None,
        description="Unprotected call to a function executing selfdestruct/suicide.",
        suggested_fix="Protect access to all sensitive functions.",),
    VulnerabilityCheck(
        id="SOLIDITY012",

        title="Uninitialized State Variables",
        severity="High",
        pattern=r"contract\s+\w+\s*\{.*address\s+\w+;.*\}\s*function\s+\w+\(\)\s*payable\s*public\s*\{",
        safe_pattern=None,
        description="Uninitialized state variables.",
        suggested_fix="Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.",),
    VulnerabilityCheck(
        id="SOLIDITY013",

        title="Uninitialized Storage Variables",
        severity="High",
        pattern=r"contract\s+\w+\s*\{.*function\s+\w+\(\)\s*\{.*struct\s+\w+\s*\w+;.*\w+\.\w+\s*=\s*0x0;",
        safe_pattern=None,
        description="An uninitialized storage variable will act as a reference to the first state variable, and can override a critical variable.",
        suggested_fix="Initialize all storage variables.",),
    VulnerabilityCheck(
        id="SOLIDITY014",

        title="Unprotected Upgradeable Contract",
        severity="High",
        pattern=r"contract\s+\w+\s*is\s+Initializable\s*\{.*function\s+initialize\(\)\s*external\s*initializer\{",
        safe_pattern=None,
        description="Detects logic contract that can be destructed.",
        suggested_fix="Add a constructor to ensure initialize cannot be called on the logic contract.",),
    VulnerabilityCheck(
        id="SOLIDITY015",

        title="Arbitrary from in TransferFrom Used with Permit",
        severity="High",
        pattern=r"function\s+\w+\(\s*address\s+from,\s*uint256\s+value.*\)\s*public\s*\{\s*erc20\.permit\(",
        safe_pattern=None,
        description="Detect when msg.sender is not used as from in transferFrom and permit is used.",
        suggested_fix="Ensure that the underlying ERC20 token correctly implements a permit function.",),
    VulnerabilityCheck(
        id="SOLIDITY016",

        title="Functions that Send Ether to Arbitrary Destinations",
        severity="High",
        pattern=r"function\s+\w+\(\)\s*public\s*\{\s*\w+\.transfer\(",
        safe_pattern=None,
        description="Unprotected call to a function sending Ether to an arbitrary address.",
        suggested_fix="Ensure that an arbitrary user cannot withdraw unauthorized funds.",),
    VulnerabilityCheck(
        id="SOLIDITY017",

        title="Array Length Assignment",
        severity="High",
        pattern=r"\.\s*length\s*=\s*\w+",
        safe_pattern=None,
        description="Detects the direct assignment of an array's length.",
        suggested_fix="Do not allow array lengths to be directly set; add values as needed.",),
    VulnerabilityCheck(
        id="SOLIDITY018",

        title="Controlled Delegatecall",
        severity="High",
        pattern=r"\.delegatecall\(",
        safe_pattern=None,
        description="Delegatecall or callcode to an address controlled by the user.",
        suggested_fix="Avoid using delegatecall. Use only trusted destinations.",),
    VulnerabilityCheck(
        id="SOLIDITY019",

        title="Payable Functions Using Delegatecall Inside a Loop",
        severity="High",
        pattern=r"public\s+payable\s*\{.*\.delegatecall\(",
        safe_pattern=None,
        description="Detect the use of delegatecall inside a loop in a payable function.",
        suggested_fix="Carefully check that the function called by delegatecall is not payable.",),
    VulnerabilityCheck(
        id="SOLIDITY020",

        title="Incorrect Exponentiation",
        severity="High",
        pattern=r"2\s*\^\s*256",
        safe_pattern=None,
        description="Detect use of bitwise xor ^ instead of exponential **.",
        suggested_fix="Use the correct operator ** for exponentiation.",),
    VulnerabilityCheck(
        id="SOLIDITY021",

        title="Incorrect Return in Assembly",
        severity="High",
        pattern=r"assembly\s*\{.*return\s*\(",
        safe_pattern=None,
        description="Detect if return in an assembly block halts unexpectedly the execution.",
        suggested_fix="Use the leave statement.",),
    VulnerabilityCheck(
        id="SOLIDITY022",

        title="msg.value Inside a Loop",
        severity="High",
        pattern=r"for\s*\(.*\)\s*\{.*msg\.value.*\}",
        safe_pattern=None,
        description="Detect the use of msg.value inside a loop.",
        suggested_fix="Provide explicit amounts alongside the receivers array, matching msg.value.",),
    VulnerabilityCheck(
        id="SOLIDITY023",

        title="Reentrancy Vulnerabilities",
        severity="High",
        pattern=r"call\.value\(",
        safe_pattern=None,
        description="Detection of the reentrancy bug involving Ether.",
        suggested_fix="Apply the check-effects-interactions pattern.",),
    VulnerabilityCheck(
        id="SOLIDITY024",

        title="Return Instead of Leave in Assembly",
        severity="High",
        pattern=r"assembly\s*\{.*return\s*\(",
        safe_pattern=None,
        description="Detect if a return is used where a leave should be used.",
        suggested_fix="Use the leave statement.",),
    VulnerabilityCheck(
        id="SOLIDITY025",

        title="Storage Signed Integer Array",
        severity="High",
        pattern=r"int\[\d+\]\s*\w+;",
        safe_pattern=None,
        description="solc versions 0.4.7-0.5.9 contain a compiler bug leading to incorrect values in signed integer arrays.",
        suggested_fix="Use a compiler version >= 0.5.10.",),
    VulnerabilityCheck(
        id="SOLIDITY026",

        title="Unchecked Transfer",
        severity="High",
        pattern=r"\.transfer\(",
        safe_pattern=None,
        description="The return value of an external transfer/transferFrom call is not checked.",
        suggested_fix="Use SafeERC20, or ensure that the transfer/transferFrom return value is checked.",),
    VulnerabilityCheck(
        id="SOLIDITY027",

        title="Weak PRNG",
        severity="High",
        pattern=r"(block\.timestamp|now|block\.blockhash)\s*%",
        safe_pattern=None,
        description="Weak PRNG due to a modulo on block.timestamp, now, or blockhash.",
        suggested_fix="Do not use block.timestamp, now, or blockhash as a source of randomness.",),
    VulnerabilityCheck(
        id="SOLIDITY028",

        title="Codex",
        severity="High",
        pattern=r"codex",
        safe_pattern=None,
        description="Use codex to find vulnerabilities.",
        suggested_fix="Review codex's message.",),
    VulnerabilityCheck(
        id="SOLIDITY029",

        title="Domain Separator Collision",
        severity="Medium",
        pattern=r"DOMAIN_SEPARATOR\(\)",
        safe_pattern=None,
        description="An ERC20 token function signature collides with EIP-2612's DOMAIN_SEPARATOR().",
        suggested_fix="Remove or rename the function that collides with DOMAIN_SEPARATOR().",),
    VulnerabilityCheck(
        id="SOLIDITY030",

        title="Dangerous Enum Conversion",
        severity="Medium",
        pattern=r"enum\s+\w+\s*\{.*\}\s*;.*=\s*\w+\s*\(",
        safe_pattern=None,
        description="Detect out-of-range enum conversion.",
        suggested_fix="Check the enum conversion range.",),
    VulnerabilityCheck(
        id="SOLIDITY031",

        title="Incorrect ERC20 Interface",
        severity="Medium",
        pattern=r"function\s+transfer\(",
        safe_pattern=None,
        description="Incorrect return values for ERC20 functions.",
        suggested_fix="Set the appropriate return values for ERC20 functions.",),
    VulnerabilityCheck(
        id="SOLIDITY032",

        title="Incorrect ERC721 Interface",
        severity="Medium",
        pattern=r"function\s+ownerOf\(",
        safe_pattern=None,
        description="Incorrect return values for ERC721 functions.",
        suggested_fix="Set the appropriate return values for ERC721 functions.",),
    VulnerabilityCheck(
        id="SOLIDITY033",

        title="Dangerous Strict Equalities",
        severity="Medium",
        pattern=r"==\s*\d+\s*ether",
        safe_pattern=None,
        description="Use of strict equalities that can be easily manipulated by an attacker.",
        suggested_fix="Avoid using strict equality for Ether or token amounts.",),
    VulnerabilityCheck(
        id="SOLIDITY034",

        title="Contracts that Lock Ether",
        severity="Medium",
        pattern=r"function\s+\w+\(\)\s+payable",
        safe_pattern=None,
        description="Contract with a payable function, but without a withdrawal capacity.",
        suggested_fix="Add a withdrawal function or remove the payable attribute.",),
    VulnerabilityCheck(
        id="SOLIDITY035",

        title="Deletion on Mapping Containing a Structure",
        severity="Medium",
        pattern=r"delete\s+\w+\[.*\]\s*;",
        safe_pattern=None,
        description="A deletion in a structure containing a mapping will not delete the mapping.",
        suggested_fix="Use a lock mechanism instead of a deletion for structures containing a mapping.",),
    VulnerabilityCheck(
        id="SOLIDITY036",

        title="State Variable Shadowing from Abstract Contracts",
        severity="Medium",
        pattern=r"contract\s+\w+\s*is\s+\w+\s*\{.*address\s+\w+\s*;",
        safe_pattern=None,
        description="Detection of state variables shadowed from abstract contracts.",
        suggested_fix="Remove the state variable shadowing.",),
    VulnerabilityCheck(
        id="SOLIDITY037",

        title="Misuse of a Boolean Constant",
        severity="Medium",
        pattern=r"(if\s+\(\s*false\s*\))|(return\s+\(\s*b\s*\|\|\s*true\s*\))",
        safe_pattern=None,
        description="Detects the misuse of a Boolean constant.",
        suggested_fix="Verify and simplify the condition.",),
    VulnerabilityCheck(
        id="SOLIDITY040",

        title="Divide Before Multiply",
        severity="Medium",
        pattern=r"\w+\s*=\s*\w+\s*/\s*\w+\s*\*\s*\w+",
        safe_pattern=None,
        description="Performing division before multiplication can lead to precision loss.",
        suggested_fix="Consider ordering multiplication before division.",),
    VulnerabilityCheck(
        id="SOLIDITY041",

        title="Reentrancy Vulnerabilities (No Ether)",
        severity="Medium",
        pattern=r"msg\.sender\.call\(\)\s*[^;]*;",
        safe_pattern=None,
        description="Detection of reentrancy bug that does not involve Ether.",
        suggested_fix="Apply the check-effects-interactions pattern.",),
    VulnerabilityCheck(
        id="SOLIDITY042",

        title="Reused Base Constructors",
        severity="Medium",
        pattern=r"constructor\(\)\s+(public|internal|external|private)\s+.*\(\)",
        safe_pattern=None,
        description="Detects if the same base constructor is called with arguments from two different locations.",
        suggested_fix="Remove the duplicate constructor call.",),
    VulnerabilityCheck(
        id="SOLIDITY043",

        title="Dangerous Usage of tx.origin",
        severity="Medium",
        pattern=r"tx\.origin",
        safe_pattern=None,
        description="tx.origin-based protection can be abused by a malicious contract.",
        suggested_fix="Do not use tx.origin for authorization.",),
    VulnerabilityCheck(
        id="SOLIDITY044",

        title="Unchecked Low-Level Calls",
        severity="Medium",
        pattern=r"\.call\(\)|\.delegatecall\(\)",
        safe_pattern=None,
        description="The return value of a low-level call is not checked.",
        suggested_fix="Ensure that the return value of a low-level call is checked or logged.",),
    VulnerabilityCheck(
        id="SOLIDITY045",

        title="Unchecked Send",
        severity="Medium",
        pattern=r"\.send\(",
        safe_pattern=None,
        description="The return value of a send is not checked.",
        suggested_fix="Ensure that the return value of send is checked or logged.",),
    VulnerabilityCheck(
        id="SOLIDITY047",

        title="Return Bomb",
        severity="Low",
        pattern=r"revert\\(0,\\s*1000000\\)",
        safe_pattern=None,
        description="A low-level callee may consume all caller's gas unexpectedly.",
        suggested_fix="Avoid unlimited implicit decoding of returndata.",),
    VulnerabilityCheck(
        id="SOLIDITY048",

        title="Block Timestamp",
        severity="Low",
        pattern=r"block\\.timestamp",
        safe_pattern=None,
        description="Dangerous usage of block.timestamp, which can be manipulated by miners.",
        suggested_fix="Avoid relying on block.timestamp for critical logic or randomness.",),

]
